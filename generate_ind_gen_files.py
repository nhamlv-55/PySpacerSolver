import os
import argparse
import glob
class Lemma:
    def __init__(self, exp_folder, new_folder, prefix = ""):
        self.lemma = ""
        self.level = -1
        self.smtfile = None
        self.new_folder = new_folder
        self.exp_folder = exp_folder
        self.prefix = prefix

    def to_smt2(self):
        if not os.path.exists(os.path.join(self.exp_folder, self.new_folder)):
            os.makedirs(os.path.join(self.exp_folder, self.new_folder))

        if self.smtfile is None: return
        with open(os.path.join(self.exp_folder, self.smtfile), "r") as f:
            old_file_lines = f.readlines()
            params = old_file_lines[-1]
            if "dump_threshold 5.00 " in params:
                return
        new_filename = self.smtfile + ".with_lemma"+self.prefix+".smt2"
        with open(os.path.join(self.exp_folder, self.new_folder, new_filename), "w") as f:
            f.writelines(old_file_lines)
            f.write("\n")
            f.write("(act-lvl %s)\n"%(self.level))
            f.write("(ind-gen %s)\n"%(self.lemma))



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-input', help='path to the smt2 files generated by running z3')
    parser.add_argument("-l", "--log", dest="logLevel", choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default='CRITICAL', help="Set the logging level")
    parser.add_argument("--old", action='store_true')#the flag to parse the old .z3-trace file format. Default to false
    args = parser.parse_args()

    exp_folder = args.input
    new_folder = "ind_gen_files"
    with open(os.path.join(exp_folder, ".z3-trace"), "r") as f:
        lines = f.readlines()
        print(lines[:10])

    current_lemma = None

    if args.old:
        for l in lines:
            if l=="LEMMA:\n":
                if current_lemma is not None:
                    current_lemma.to_smt2()
                current_lemma = Lemma(exp_folder, new_folder)
            elif "LEVEL:" in l:
                lvl = int(l.strip().split(":")[1])
                current_lemma.level = lvl
            elif "Dumping" in l:
                if current_lemma.smtfile is not None:
                    continue
                filename = l.strip().split()[-1]
                current_lemma.smtfile = filename
            else:
                current_lemma.lemma+=l
    else:
        seed_files = glob.glob(exp_folder+"/pool_solver*.smt2")
        seed_files = sorted(seed_files)
        seed_file = seed_files[0]
        counter = 0
        for l in lines:
            if l.startswith("-----------------------------"):
                if current_lemma is not None:
                    current_lemma.to_smt2()
                    current_lemma = None
                    counter +=1
            elif l.startswith("Generalized from"):
                #create a from lemma
                current_lemma = Lemma(exp_folder, new_folder, prefix = "_from_"+str(counter).zfill(5))
                current_lemma.smtfile = seed_file
            elif l.startswith("into"):
                #save the *from* lemma
                if current_lemma is not None:
                    current_lemma.to_smt2()
                #create the *into* lemma
                current_lemma = Lemma(exp_folder, new_folder, prefix = "_into_"+str(counter).zfill(5))
                current_lemma.smtfile = seed_file
            elif current_lemma is not None:
                current_lemma.lemma +=l
            else:
                continue
            

if __name__=="__main__":
    main()
